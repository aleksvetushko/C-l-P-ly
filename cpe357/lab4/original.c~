#include <stdio.h>
#include <unistd.h>

#include "mem.h"

typedef long Align;

union header
{
   struct
   {
      union header *ptr;
      size_t size;
   } s;
   Align x;
};

typedef union header Header;

static Header base;
static Header *freep = NULL;

static Header *morecore(size_t);

void *lab_malloc(size_t nbytes)
{
   Header *p, *prevp;
   size_t nunits;

   nunits = (nbytes + sizeof(Header) - 1)/ sizeof(Header) + 1;
   if ((prevp = freep) == NULL) /*this happens at the beginning of each run of the program*/
   {
      /*when this happens, base.s.ptr points back to base, and the address of base is now the address of prevp and freep
       * Thus, freep and prevp also point to themselves, and they all point to &base*/
      base.s.ptr = &base;
      freep = &base;
      prevp = &base;
      base.s.size = 0;
   }

         /*(void*)prevp instead of (void*)&prevp bc prevp is the whole header, so uhhh virtual address space???*/
         printf("prevp %p, prevp ptr %p base %p base ptr %p\n", (void*)prevp, (void*)&prevp->s.ptr, (void*)&base, (void*)&base.s.ptr);
   for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {

         printf("p %p, p.s.ptr %p size %li\n", (void*)p, (void*)p->s.ptr, (long)p->s.size);
      if (p->s.size >= nunits) {
         if (p->s.size == nunits) {
            prevp->s.ptr = p->s.ptr;
         }
         else {
            p->s.size -= nunits;
            p += p->s.size;
            p->s.size = nunits;
         }

         freep = prevp;
         return (void *)(p + 1);
      }
      if (p == freep){
         if ((p = morecore(nunits)) == NULL){
            return NULL;
         }
         printf("p %p, p.s.ptr %p size %li\n", (void*)p, (void*)p->s.ptr, (long)p->s.size);

      }
   }
}

#define NALLOC 1024
static Header *morecore(size_t nu)
{
   char *cp;
   Header *up;

   if (nu < NALLOC)
   {
      nu = NALLOC;
   }
   cp = sbrk(nu * sizeof(Header));
   if (cp == (char *) -1)
   {
      return NULL;
   }
   up = (Header *) cp;
   up->s.size = nu;
   lab_free((void *)(up + 1));
   return freep;
}

void lab_free(void *ap)
{
   Header *bp, *p;

   bp = (Header *)ap - 1;
   for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
   {
      if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
      {
         break;
      }
   }
   if (bp + bp->s.size == p->s.ptr)
   {
      bp->s.size += p->s.ptr->s.size;
      bp->s.ptr = p->s.ptr->s.ptr;
   }
   else
   {
      bp->s.ptr = p->s.ptr;
   }
   if (p + p->s.size == bp)
   {
      p->s.size += bp->s.size;
      p->s.ptr = bp->s.ptr;
   }
   else
   {
      p->s.ptr = bp;
   }
   freep = p;
}

